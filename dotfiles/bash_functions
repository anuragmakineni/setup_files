#!bin/bash
######################################################################
# This file is a collection of useful functions
######################################################################

# share internet
function sharenet()
{
    if [ $# -eq 0 ]; then
        echo "usage: sharenet <on/off>"
        return 0
    fi

    local if_from=wlan0
    local if_to=eth0
    # check command-line commands
    cmd=$1
    case $cmd in
        on )
            sudo su -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
            echo "Enable sharing internet from $if_from to $if_to"
            sudo /sbin/iptables -A FORWARD -i $if_to -o $if_from -j ACCEPT
            sudo /sbin/iptables -A FORWARD -i $if_from -o $if_to -m state --state RELATED,ESTABLISHED -j ACCEPT
            sudo /sbin/iptables -t nat -A POSTROUTING -o $if_from -j MASQUERADE
            ;;
        off )
            sudo su -c "echo 0 > /proc/sys/net/ipv4/ip_forward"
            echo "Disable sharing internet from $if_from to $if_to"
            ;;
        * )
            echo "sharenet: $1: invalid command"
            echo "usage: sharenet <on/off>"
            ;;
    esac
}

# Get my ip address
function myip()
{
  local myip=`w3m -dump http://checkip.dyndns.org:8245/`
  echo "${myip}"
}

function ii()   # get current host related info
{
    echo -e "\nYou are logged on ${bldpur}`hostname`"
    echo -e "\nAdditionnal information:$txtrst " ; uname -a
    echo -e "\n${bldpur}Users logged on:$txtrst " ; w -h
    echo -e "\n${bldpur}Current date :$txtrst " ; date
    echo -e "\n${bldpur}Machine stats :$txtrst " ; uptime
    echo -e "\n${bldpur}Memory stats :$txtrst " ; free
    echo -e "\n${bldpur}Local IP Address :$txtrst" ; myip
    echo -e "\n${bldpur}eth0 ip Address :$txtrst" ; ethip
    echo -e "\n${bldpur}wlan0 ip Address :$txtrst" ; wlanip
    echo
}

# finds directory sizes and lists them for the current directory
function dirsize()
{
    du -shx * .[a-zA-Z0-9_]* 2> /dev/null | \
    egrep '^ *[0-9.]*[MG]' | sort -n > /tmp/list
    egrep '^ *[0-9.]*M' /tmp/list
    egrep '^ *[0-9.]*G' /tmp/list
    rm -rf /tmp/list
}

# Easy extact
function extract()
{
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       rar x $1       ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.apk)       unzip $1       ;;
          *.epub)      unzip $1       ;;
          *.xpi)       unzip $1       ;;
          *.zip)       unzip $1       ;;
          *.war)       unzip $1       ;;
          *.jar)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

# easy compress - archive wrapper
function compress()
{
    if [ -n "$1" ] ; then
        FILE=$1
        case $FILE in
        *.tar) shift && tar cf $FILE $* ;;
        *.tar.bz2) shift && tar cjf $FILE $* ;;
        *.tar.gz) shift && tar czf $FILE $* ;;
        *.tgz) shift && tar czf $FILE $* ;;
        *.zip) shift && zip $FILE $* ;;
        *.rar) shift && rar $FILE $* ;;
        esac
    else
        echo "usage: compress <foo.tar.gz> ./foo ./bar"
    fi
}

function ethif()
{
    local val=$(ifconfig | grep eth | cut -d: -f2| awk '{print $1}')
    echo "$val"
}

function wlanif()
{
    local val=$(ifconfig | grep wlan | cut -d: -f2| awk '{print $1}')
    echo "$val"
}

function ethip()
{
    local eth=$(ethif)
    local myip=$(ifconfig ${eth} | grep 'inet addr:' | cut -d: -f3 | awk '{print $1}')
    echo "$myip"
}

function wlanip()
{
    local wlan=$(wlanif)
    local myip=$(ifconfig ${wlan} | grep 'inet addr:' | cut -d: -f3 | awk '{print $1}')
    echo "$myip"
}

# set ROS_IP
function rosip()
{
    # print current ip if no inputs
    if [ $# -eq 0 ]; then
        rosip_disp
        return 0
    fi

    # check command-line options
    if [ -n "$(echo $1 | grep '^-')" ]; then
        case $1 in
            --help | -h )
                rosip_help
                ;;
            * )
                echo "rosip: $1: invalid option"
                rosip_help
                ;;
        esac
        return 0
    fi

    cmd=$1
    local rx='([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])'
    case $cmd in
        set )
            if [ "$2" == "-h" ]; then
                echo -e "rosip set set ROS_IP to the given IP address"
                echo -e "usage: rosip set 192.168.129.1"
            elif [[ ! $2 =~ ^$rx\.$rx\.$rx\.$rx$ ]]; then
                # validating IP address using regexp
                echo -e "rosip: set: invalid IP address"
                echo -e "usage: rosip set 192.168.129.1"
            else
                export ROS_IP="$2"
                rosip_disp
            fi
            ;;
        reset )
            if [ "$2" == "-h" ]; then
                echo -e "rosip reset reset ROS_IP to empty"
                echo -e "usage: rosip reset"
            else
                export ROS_IP=localhost
                rosip_disp
            fi
            ;;
        * )
            echo "rosip: $1: invalid command"
            rosip_help
            ;;
    esac
}

function rosip_disp()
{
    echo -e "${bldylw}ROS_IP${txtrst}"
    echo -e "${bldgrn}$ROS_IP${txtrst}"
    return 0
}

function rosip_help()
{
    echo -e "rosip is a command-line tool for managing ROS_MASTER_URI"
    echo -e "usage: rosip [--help|-h] <command> [<args>]\n"
    echo -e "The most commonly used rosip commands are:"
    echo -e "    set   \tSet ROS_IP to the given IP address"
    echo -e "    reset \tReset ROS_IP to empty"
    echo -e "\nType rosip <command> -h for more detailed usage, e.g. 'rosip set -h'\n"
    return 0
}

# set ROS_MASTER_URI
function rosmu()
{
    # print current master uri if no inputs
    if [ $# -eq 0 ]; then
        rosmu_disp
        return 0
    fi

    # check command-line options
    if [ -n "$(echo $1 | grep '^-')" ]; then
        case $1 in
            --help | -h )
                rosmu_help
                ;;
            * )
                echo "rosmu: $1: invalid option"
                rosmu_help
                ;;
        esac
        return 0
    fi

    cmd=$1
    local rx='([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])'
    case $cmd in
        set )
            if [ "$2" == "-h" ]; then
                echo -e "rosmu set set ROS_MASTER_URI to the given IP address"
                echo -e "usage: rosmu set 192.168.129.1"
            elif [[ ! $2 =~ ^$rx\.$rx\.$rx\.$rx$ ]]; then
                # validating IP address using regexp
                echo -e "rosmu: set: invalid IP address"
                echo -e "usage: rosmu set 192.168.129.1"
            else
                export ROS_MASTER_URI="http://$2:11311"
                rosmu_disp
            fi
            ;;
        reset )
            if [ "$2" == "-h" ]; then
                echo -e "rosmu reset reset ROS_MASTER_URI to local host"
                echo -e "usage: rosmu reset"
            else
                export ROS_MASTER_URI="http://localhost:11311"
                rosmu_disp
            fi
            ;;
        * )
            echo "rosmu: $1: invalid command"
            rosmu_help
            ;;
    esac
}

function rosmu_disp()
{
    echo -e "${bldylw}ROS_MASTER_URI${txtrst}"
    echo -e "${bldgrn}$ROS_MASTER_URI${txtrst}"
    return 0
}

function rosmu_help()
{
    echo -e "rosmu is a command-line tool for managing ROS_MASTER_URI"
    echo -e "usage: rosmu [--help|-h] <command> [<args>]\n"
    echo -e "The most commonly used rosmu commands are:"
    echo -e "    set   \tSet ROS_MASTER_URI to the given IP address"
    echo -e "    reset \tReset ROS_MASTER_URI to localhost"
    echo -e "\nType rosmu <command> -h for more detailed usage, e.g. 'rosmu set -h'\n"
    return 0
}
# rospp manages ROS_PACKAGE_PATH
# Initialize variables
if [ -z $ROSPP_DEFAULT ]; then
    declare -rx ROSPP_DEFAULT=$ROS_PACKAGE_PATH
fi
export ROSPP_STACK=${ROSPP_STACK:-$ROS_PACKAGE_PATH}
ROS_PACKAGE_PATH=$ROSPP_STACK

# main function of rospp
function rospp()
{
    # print current path if no inputs
    if [ $# -eq 0 ]; then
        rospp_disp
        return 0
    fi

    # check command-line options
    if [ -n "$(echo $1 | grep '^-')" ]; then
        case $1 in
            --help | -h )
                rospp_help
                ;;
            * )
                echo "rospp: $1: invalid option"
                rospp_help
                ;;
        esac
        return 0
    fi

    # check command-line commands
    cmd=$1
    case $cmd in
        reset )
            if [ "$2" == "-h" ]; then
                echo -e "rospp reset set ROS_PACKAGE_PATH to its default value"
                echo -e "usage: rospp reset"
            else
                ROSPP_STACK=$ROSPP_DEFAULT
                ROS_PACKAGE_PATH=$ROSPP_STACK
                rospp_disp
            fi
            ;;
        push )
            if [ "$2" == "-h" ]; then
                echo -e "usage: rospp push [dir]"
            else
                rospp_push "$2"
                rospp_disp
            fi
            ;;
        pop )
            if [ "$2" == "-h" ]; then
                echo -e "usage: rospp pop"
            else
                rospp_pop
                rospp_disp
            fi
            ;;
        disp )
            if [ "$2" == "-h" ]; then
                echo -e "usage: rospp disp"
            else
                rospp_disp
            fi
            ;;
        * )
            echo "rospp: $1: invalid command"
            rospp_help
            ;;
    esac
    return 0
}

# display ROS_PACKAGE_PATH
function rospp_disp()
{
    echo -e "${bldylw}ROS_PACKAGE_PATH$txtrst"
    rospp_split $ROS_PACKAGE_PATH
    return 0
}

# print help contents for rospp
function rospp_help()
{
    echo -e "rospp is a command-line tool for managing ROS_PACKAGE_PATH"
    echo -e "usage: rospp [--help|-h] <command> [<args>]\n"
    echo -e "The most commonly used rospp commands are:"
    echo -e "    push \tPush directory to ROS_PACKAGE_PATH and cd to it"
    echo -e "    pop  \tPop top directory from ROS_PACKAGE_PATH"
    echo -e "    reset\tReset ROS_PACKAGE_PATH"
    echo -e "    add  \tAdd directory to ROS_PACKAGE_PATH"
    echo -e "    rm   \tRemove path from ROS_PACKAGE_PATH"
    echo -e "    disp \tDisplay all ROS_PACKAGE_PATH"
    echo -e "\nType rospp <command> -h for more detailed usage, e.g. 'rospp push -h'\n"
    return 0
}

# rospp push
function rospp_push()
{
    local dir=${1:-$PWD}
    if [ \( -d $dir \) -a \( -x $dir \) ]; then
        ROSPP_STACK="$ROSPP_STACK:$dir"
        ROS_PACKAGE_PATH=$ROSPP_STACK
    else
        echo "rospp: push: invalid directory"
    fi
    return 0
}

# rospp pop
function rospp_pop()
{
    # append : to the beginning stack
    local stack=:$ROSPP_STACK
    if [ ! $stack == ":" ]; then
        # remove the last path in stack
        ROSPP_STACK=${stack%:*}
        # remove the beginning colon
        ROSPP_STACK=${ROSPP_STACK#:}
        ROS_PACKAGE_PATH=$ROSPP_STACK
    else
        echo "ROS_PACKAGE_PATH empty"
    fi
    return 0
}

# split string with : as delimeter
function rospp_split()
{
    # append : to the end of pathlist
    pathlist=$1:
    i=0
    while [ $pathlist ]; do
        if [ ! $pathlist == ":" ]; then
            echo -e "$bldgrn$((++i)): ${pathlist%%:*}$txtrst"
        fi
        # remove the first path
        pathlist=${pathlist#*:}
    done
    return 0
}

# rerun make in build folder
function remake()
{
    make -C ./build $@
}
