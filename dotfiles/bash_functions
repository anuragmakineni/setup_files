#!bin/bash
# ssh to nanoplus
function overo()
{
    case "$1" in
        "13")
            IP=162
            ;;
        "14")
            IP=163
            ;; "15")
            IP=164
            ;;
        *)
            echo "Not a valid overo"
            return
            ;;
    esac

    ssh "root@192.168.129.$IP"
}

# set ROS_MASTER_URI
function rosmu()
{
    if [ $# -eq 0 ]; then
        echo $ROS_MASTER_URI
    elif [ "$1" == "local" ]; then
        export ROS_MASTER_URI=http://localhost:11311
    elif [ "$1" = "overo" ]; then
        case "$2" in
            "13")
                IP=162
                ;;
            "14")
                IP=163
                ;;
            "15")
                IP=164
                ;;
            *)
                echo "Not a valid overo"
                return
                ;;
        esac
        export ROS_MASTER_URI=http://192.168.129.$IP/11311
        echo $ROS_MASTER_URI
    fi
}

# rospp manages ROS_PACKAGE_PATH
# Initialize variables
if [ -z $ROSPP_DEFAULT ]; then
    declare -rx ROSPP_DEFAULT=$ROS_PACKAGE_PATH
fi
export ROSPP_STACK=${ROSPP_STACK:=$ROS_PACKAGE_PATH}
ROS_PACKAGE_PATH=$ROSPP_STACK
function rospp()
{
    # print current path if no inputs
    if [ $# -eq 0 ]; then
        echo -e "$bldylw-- ROS_PACKAGE_PATH$txtrst"
        splitpath $ROS_PACKAGE_PATH
        return 0
    fi

    # check command-line options
    if [ -n "$(echo $1 | grep '^-')" ]; then
        case $1 in
            --help | -h )
                rospp_help ;;
            * )
                echo "rospp: $1: invalid option"
                rospp_help
                ;;
        esac
        return 0
    fi

    # check command-line commands
    if [ $1 = "push" ]; then
        if [ $# -eq 1 ]; then
            export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$(pwd)
        elif [ $# -eq 2 ]; then
            export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$2
        fi
        splitpath $ROS_PACKAGE_PATH
    fi

    if [ $1 = "reset" ]; then
        ROSPP_STACK=$ROSPP_DEFAULT
        ROS_PACKAGE_PATH=$ROSPP_STACK
    fi
}

# print help contents for rospp
function rospp_help()
{
    echo -e "rospp is a command-line tool for printing information about ROS_PACKAGE_PATH"
    echo -e "usage: rospp [--help|-h] <command> [<args>]\n"
    echo -e "The most commonly used rospp commands are:"
    echo -e "    push \tPush directory to ROS_PACKAGE_PATH and cd to it"
    echo -e "    pop  \tPop top directory from ROS_PACKAGE_PATH"
    echo -e "    reset\tReset ROS_PACKAGE_PATH"
    echo -e "    add  \tAdd directory to ROS_PACKAGE_PATH"
    echo -e "    rm   \tRemove path from ROS_PACKAGE_PATH"
    echo -e "    disp \tDisplay all ROS_PACKAGE_PATH"
    echo -e "\nType rospp <command> -h for more detailed usage, e.g. 'rospp push -h'\n"
    return 0
}


# split string with : as delimeter
function splitpath()
{
    # append : to the end of pathlist
    pathlist=$1:
    i=0
    while [ $pathlist ]; do
        echo -e "$bldgrn$((++i)): ${pathlist%%:*}$txtrst"
        pathlist=${pathlist#*:}
    done
}
