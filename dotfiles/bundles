"NeoBundle Scripts-----------------------------
if has('vim_starting')
  set nocompatible

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
NeoBundle 'tpope/vim-fugitive'

NeoBundle 'wlangstroth/vim-racket'

" Python-mode
NeoBundle 'klen/python-mode'
" Python-mode
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_rope = 1

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_key = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

" Promptline
NeoBundle 'edkolev/promptline.vim'
"let g:promptline_theme = 'airline'
"let g:promptline_preset = {
      "\'a'    : [ '\h' ],
      "\'b'    : [ '\u' ],
      "\'c'    : [ '\w' ],
      "\'x'    : [ promptline#slices#vcs_branch() ]}
let g:promptline_symbols={
    \ 'left'       : '',
    \ 'left_alt'   : '',
    \ 'dir_sep'    : '/',
    \ 'truncation' : '...',
    \ 'vcs_branch' : '',
    \ 'space'      : ' '}

" Tmuxline
NeoBundle 'edkolev/tmuxline.vim'
let g:tmuxline_separators={
    \ 'left' : '',
    \ 'left_alt': '',
    \ 'right' : '',
    \ 'right_alt' : '',
    \ 'space' : ' '}
let g:tmuxline_preset={
      \'a'    : '#H',
      \'b'    : '#(whoami)',
      \'c'    : '#(host `hostname` | cut -d " " -f 4)',
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#I', '#W'],
      \'x'    : '#W',
      \'y'    : '#(date)',
      \'z'    : '#S'}

" Neocomplete
" NeoBundle 'Shougo/neocomplete.vim'
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'}
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
" Plugin key-mappings.
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()
" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#max_list=10
let g:neocomplete#max_keyword_width=48
let g:neocomplete#auto_completion_start_length=4
let g:neocomplete#manual_completion_start_length=1
let g:neocomplete#enable_fuzzy_completion=0


" Rainbow
NeoBundle 'luochen1990/rainbow'
let g:rainbow_active = 1

" vim-clang-format
NeoBundle 'rhysd/vim-clang-format'
autocmd FileType c,cc,cpp,h,hpp nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cc,cpp,h,hpp vnoremap <buffer><Leader>cf :ClangFormat<CR>

" Nerdtree
NeoBundle 'scrooloose/nerdtree'
nmap <leader>d :NERDTree<CR>
nmap <leader>dt :NERDTreeToggle<CR>
nmap <leader>df :NERDTreeFind<CR>

" CtrlP
NeoBundle 'kien/ctrlp.vim'
let g:ctrlp_map='<C-T>'
let g:ctrlp_cmd='CtrlP'
let g:ctrlp_custom_ignore={
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }

" Tagbar
NeoBundle 'majutsushi/tagbar'
nmap <leader>b :Tagbar<CR>
nmap <leader>bt :TagbarToggle<CR>

" easymotion
NeoBundle 'Lokaltog/vim-easymotion'

NeoBundle 'vim-scripts/bufexplorer.zip'
nnoremap <Esc>p :bp<CR>
nnoremap <Esc>n :bn<CR>
nnoremap <Esc>d :bd<CR>
noremap <CR> :BufExplorer<CR>

" Nerdcommenter
NeoBundle 'scrooloose/nerdcommenter'

" Colorscheme
NeoBundle 'tomasr/molokai'
let g:molokai_original=1

" Other bundles
NeoBundle 'othree/xml.vim'
NeoBundle 'mhinz/vim-signify'
NeoBundle 'xolox/vim-misc'
NeoBundle 'ervandew/supertab'

" Airline
NeoBundle 'bling/vim-airline'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline#extensions#tabline#enabled=1

" vim-indent-guides
 "<leader>ig Toggles indent guides
NeoBundle 'nathanaelkane/vim-indent-guides'
let g:indent_guides_guide_size=1

" Trailing Whitespace
NeoBundle 'bronson/vim-trailing-whitespace'

" Expand region
NeoBundle 'terryma/vim-expand-region'

" Multiple cursors
NeoBundle 'terryma/vim-multiple-cursors'

" Cpp enhanced highlight
NeoBundle 'octol/vim-cpp-enhanced-highlight'

" Easy align
NeoBundle 'junegunn/vim-easy-align'

" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
"End NeoBundle Scripts-------------------------

colorscheme molokai
