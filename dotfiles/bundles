" Vundle.vim
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

" Nerdtree
Plugin 'scrooloose/nerdtree'
nmap <leader>d :NERDTree<CR>
nmap <leader>dt :NERDTreeToggle<CR>
nmap <leader>df :NERDTreeFind<CR>

" Alternative
":A   switches to the header file corresponding to the current file being edited (or vise versa)
":AS  splits and switches
":AV  vertical splits and switches
":AT  new tab and switches
":AN  cycles through matches
":IH  switches to file under cursor
":IHS splits and switches
":IHV vertical splits and switches
":IHT new tab and switches
":IHN cycles through matches
"<Leader>ih switches to file under cursor
"<Leader>is switches to the alternate file of file under cursor (e.g. on  <foo.h> switches to foo.cpp)
"<Leader>ihn cycles through matches
Plugin 'vim-scripts/a.vim'

" CtrlP
Plugin 'kien/ctrlp.vim'
let g:ctrlp_map='<C-T>'
let g:ctrlp_cmd='CtrlP'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" Airline
Plugin 'bling/vim-airline'
let g:airline_theme='badwolf'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline#extensions#tabline#enabled=1

" Easymotion
" <leader><leader>w,b,e to jump
" <leader><leader>f{char} to search
Plugin 'Lokaltog/vim-easymotion'

" Expand region
" Press + to expand the visual selection and _ to shrink it.
" Use vi<quote> or vc<quote> to select
Plugin 'terryma/vim-expand-region'

" Tagbar
Plugin 'majutsushi/tagbar'
nmap <leader>b :Tagbar<CR>
nmap <leader>bt :TagbarToggle<CR>

" Taglist
Plugin 'vim-scripts/taglist.vim'
nmap <leader>l : Tlist<CR>
nmap <leader>lt : TlistToggle<CR>

" Multiple cursors
" Ctrl-n to select, again to search more
" Ctrl-p redo, Ctrl-x skip
Plugin 'terryma/vim-multiple-cursors'

" Bufexplorer
Plugin 'vim-scripts/bufexplorer.zip'
nnoremap <Esc>p :bp<CR>
nnoremap <Esc>n :bn<CR>
nnoremap <Esc>d :bd<CR>
noremap <CR> :BufExplorer<CR>

" Nerdcommenter
" <leader>cc Comment out the current line or text selected in visual mode.
" <leader>c  Toggles the comment state of the selected line(s)
" <leader>ci Toggles the comment state of the selected line(s) individually.
" <leader>cA Adds comment delimiters to the end of line and goes into insert mode between them.
" <leader>cu Uncomments the selected line(s).
Plugin 'scrooloose/nerdcommenter'

" Align
" :5,10Align =
"     Align on '=' signs
Plugin 'vim-scripts/Align'

" vim-indent-guides
" <leader>ig Toggles indent guides
Plugin 'nathanaelkane/vim-indent-guides'
let g:indent_guides_guide_size=1

" Trailing Whitespace
" :FixWhiteSpace
Plugin 'bronson/vim-trailing-whitespace'

" Autoformat
" A2 - java style
" s2 - indent space 2
" xn - attach namespace
" xc - attach classes
" xl - attach inline
" xk - attach extern
" Y  - indent col1 comment
" p  - pad operator
" H  - pad header
" U  - unpad paren
" k3 - align pointer name
" W3 - align reference name
" O  - keep one line blocks
" o  - keep one line statements
Plugin 'Chiel92/vim-autoformat'
noremap <F3> :Autoformat<CR><CR>
let g:formatprg_cpp="astyle"
let g:formatprg_args_cpp="-A2 -s2 -xn -xc -xl -xk -Y -U -H -k3 -W3 -O -o -p"
let g:formatprg_c="astyle"
let g:formatprg_args_c="-A2 -s2 -xn -xc -xl -xk -Y -U -H -k3 -W3 -O -o -p"
let g:formatprg_java="astyle"
let g:formatprg_args_java="-A2 -s2 -xn -xc -xl -xk -Y -U -H -k3 -W3 -O -o -p"

" Surround
" cs<1><2> to change 1 to 2
" ds<1>    to delete 1
" ysiw<1>  to insert around current word
" yss<1>   to insert around entire line
Plugin 'tpope/vim-surround'

" Promptline
Plugin 'edkolev/promptline.vim'
let g:promptline_symbols={
    \ 'left'       : '',
    \ 'left_alt'   : '',
    \ 'dir_sep'    : '/',
    \ 'truncation' : '...',
    \ 'vcs_branch' : '',
    \ 'space'      : ' '}

" Tmuxline
Plugin 'edkolev/tmuxline.vim'
let g:tmuxline_separators={
    \ 'left' : '',
    \ 'left_alt': '',
    \ 'right' : '',
    \ 'right_alt' : '',
    \ 'space' : ' '}
let g:tmuxline_preset={
      \'a'    : '#H',
      \'b'    : '#(whoami)',
      \'c'    : '#(host `hostname` | cut -d " " -f 4)',
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#I', '#W'],
      \'x'    : '#W',
      \'y'    : '#(date)',
      \'z'    : '#S'}

" Syntastic
Plugin 'scrooloose/syntastic'
let g:syntastic_always_populate_loc_list=1
let g:syntastic_python_checkers=['pylint']
let g:syntastic_enable_matlab_checker = 1

" NarrowRegion
" :NR
" :NW
Plugin 'chrisbra/NrrwRgn'

" Gundo
Plugin 'vim-scripts/Gundo'
nnoremap <F5> :GundoToggle<CR>

" Neocomplete
Plugin 'Shougo/neocomplete.vim'
" Disable AutoComplPop.
let g:acp_enableAtStartup=0
" Use neocomplete.
let g:neocomplete#enable_at_startup=1
" Use smartcase.
let g:neocomplete#enable_smart_case=1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length=4
let g:neocomplete#lock_buffer_name_pattern='\*ku\*'
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns={}
endif
let g:neocomplete#keyword_patterns['default']='\h\w*'
" Plugin key-mappings.
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()
" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
let g:neocomplete#max_list=10
let g:neocomplete#max_keyword_width=50
let g:neocomplete#auto_completion_start_length=4
let g:neocomplete#manual_completion_start_length=1

" vim-matlab
Plugin 'sgeb/vim-matlab'
autocmd BufEnter *.m compiler mlint

" Other bundles
Plugin 'othree/xml.vim'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'mhinz/vim-signify'
Plugin 'xolox/vim-easytags'
Plugin 'xolox/vim-misc'
Plugin 'taketwo/vim-ros'
Plugin 'vim-scripts/DoxygenToolkit.vim'
Plugin 'oblitum/rainbow'
let g:rainbow_active=1
let g:rainbow_ctermfgs = ['lightgreen', 'yellow', 'magenta']
" Colorscheme
Plugin 'tomasr/molokai'
let g:molokai_original=1
Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'chriskempson/base16-vim'
let base16colorspace=256

call vundle#end()
